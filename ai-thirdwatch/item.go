/* 
 * Thirdwatch API
 *
 * The first version of the Thirdwatch API is an exciting step forward towards making it easier for developers to pass data to Thirdwatch.  Once you've [registered your website/app](https://thirdwatch.ai) it's easy to start sending data to Thirdwatch.  All endpoints are only accessible via https and are located at `api.thirdwatch.ai`. For instance: you can send event at the moment by ```HTTP POST``` Request to the following URL with your API key in ```Header``` and ```JSON``` data in request body. ```   https://api.thirdwatch.ai/event/v1 ``` Every API request must contain ```API Key``` in header value ```X-THIRDWATCH-API-KEY```  Every event must contain your ```_userId``` (if this is not available, you can alternatively provide a ```_sessionId``` value also in ```_userId```).  JavaScript Fingerprinting module for capturing unique devices and tracking user interaction.  This script will identify unique devices with respect to the browser. For e.g., if chrome is opened in normal mode a unique device id is generated and this will be same if chrome is opened in incognito mode or reinstalled.  Paste the below script onto your webpage, just after the opening `<body>` tag. This script should be added to the page which is accessed externally by the user of your website. For e.g., If you want to track three different webpages then paste the below script onto each webpage, just after the opening `<body>` tag. This script should not be added onto internal tools or admin panels. ```   &lt;script id=\"thirdwatch\"     data-session-cookie-name=\"&lt;cookie_name&gt;\"     data-session-id-value=\"&lt;session_id&gt;\"     data-user-id=\"&lt;user_id&gt;\"     data-app-secret=\"&lt;app_secret&gt;\"     data-is-track-pageview=\"true\"&gt; (function() {         var loadDeviceJs = function() {         var element = document.createElement(\"script\");         element.async = 1;         element.src = \"https://cdn.thirdwatch.ai/tw.min.js\";         document.body.appendChild(element);         };         if (window.addEventListener) {              window.addEventListener(\"load\", loadDeviceJs, false);         } else if (window.attachEvent) {         window.attachEvent(\"onload\", loadDeviceJs);         }     })();   &lt;/script&gt; ``` * `data-session-cookie-name` -- The cookie name where you are saving the unique session id. We will pick the session id by reading its value from the cookie name. (Optional) * `data-session-id-value` -- In case you are not passing `data-session-cookie-name` than you can put session id directly in this parameter. In absence of both `data-session-cookie-name` and `data-session-id-value`, our system will generate a session Id. (Optional) * `data-user-id` -- Unique user id at your end. This can be email id or primary key in the database. In case of guest user, you can insert session Id here. * `data-app-secret` -- Unique App secret generated for you by Thirdwatch. * `data-is-track-pageview` -- If this is set to true, then the url on which this script is running will be sent to Thirdwatch, else the url will not be captured.   The Score API is use to get an up to date cutomer trust score after you have sent transaction event and order successful. This API will provide the riskiness score of the order with reasons. Some examples of when you may want to check the score are before:    - Before Shippement of a package   - Finalizing a money transfer   - Giving access to a prearranged vacation rental   - Sending voucher on mail  ```   https://api.thirdwatch.ai/neo/v1/score?api_key=<your api key>&order_id=<Order id> ```  According to Score you can decide to take action Approve or Reject. Orders with score more than 70 will consider as Riskey orders. We'll provide some reasons also in rules section.   ``` {   \"order_id\": \"OCT45671\",   \"user_id\": \"ajay_245\",   \"order_timestamp\": \"2017-05-09T09:40:45.717Z\",   \"score\": 82,   \"flag\": \"red\",     -\"reasons\": [     {         \"name\": \"_numOfFailedTransactions\",         \"display_name\": \"Number of failed transactions\",         \"flag\": \"green\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_accountAge\",         \"display_name\": \"Account age\",         \"flag\": \"red\",         \"value\": \"0\",         \"is_display\": true       },       {         \"name\": \"_numOfOrderSameIp\",         \"display_name\": \"Number of orders from same IP\",         \"flag\": \"red\",         \"value\": \"11\",         \"is_display\": true       }     ] } ``` 
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package ai-thirdwatch

// The Item field type represents a product or service for sale in your business. The value must be a nested object with the appropriate item subfields. Generally used in the add_to_cart and remove_from_cart events. 
type Item struct {

	// The item's unique identifier according to your systems. Use the same ID that you would use to look up items on your website's database.
	ItemId string `json:"_itemId,omitempty"`

	// The item's name, e.g., \"WD 2 TB External Hard Drive\".
	ProductTitle string `json:"_productTitle,omitempty"`

	// The item unit price in numbers, in the base unit of the currency_code.e.g. \"2500\"
	Price string `json:"_price,omitempty"`

	// The [ISO-4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for the amount. e.g., USD, INR alternative currencies, like bitcoin or points systems.
	CurrencyCode string `json:"_currencyCode,omitempty"`

	// If the item has a Universal Product Code (UPC), provide it here.
	Upc string `json:"_upc,omitempty"`

	// If the item has a Stock-keeping Unit ID (SKU), provide it here.
	Sku string `json:"_sku,omitempty"`

	// If the item is a book with an International Standard Book Number (ISBN), provide it here.
	Isbn string `json:"_isbn,omitempty"`

	// The brand name of the item.
	Brand string `json:"_brand,omitempty"`

	// Name of the item's manufacturer.
	Manufacturer string `json:"_manufacturer,omitempty"`

	// The category this item is listed under in your business. e.g., \"travel\", \"man > bags\".
	Category string `json:"_category,omitempty"`

	// The tags used to describe this item in your business. e.g., \"man\", \"summer\".
	Tags string `json:"_tags,omitempty"`

	// The color of the item.
	Color string `json:"_color,omitempty"`

	// The quantity of the item.
	Quantity int64 `json:"_quantity,omitempty"`

	// Is item on sale or running offers on this item .
	IsOnSale bool `json:"_isOnSale,omitempty"`

	// The max quantity per user for this item.
	MaxQuantity int64 `json:"_maxQuantity,omitempty"`

	// Price of the product after discount.
	DiscountPrice string `json:"_discountPrice,omitempty"`

	// Weight of the product in Kilo Gram, e.g. \"3\" , \"0.5\"
	ProductWeight string `json:"_productWeight,omitempty"`

	// The [ISO-3166](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the item, e.g., \"IN\" in case of India.
	Country string `json:"_country,omitempty"`

	// Short description of the item.
	DescriptionShort string `json:"_descriptionShort,omitempty"`

	// Detail description of the item.
	Description string `json:"_description,omitempty"`

	Seller Seller `json:"_seller,omitempty"`
}
